{
  "swagger": "2.0",
  "info": {
    "description": "This is the API for cuHacking 2020.",
    "version": "1.2-dev",
    "title": "Magneton (cuHacking 2020 API)",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "cuhacking.com",
  "basePath": "/api-dev",
  "tags": [
    {
      "name": "Mailing List",
      "description": "The mailing list - handles collection of emails"
    },
    {
      "name": "Users",
      "description": "Handles users and their accounts"
    },
    {
      "name": "Schedule",
      "description": "The event schedule"
    },
    {
      "name": "Updates",
      "description": "The event's announcements"
    },
    {
      "name": "Applications",
      "description": "Applications for the event"
    },
    {
      "name": "Map",
      "description": "The map data"
    },
    {
      "name": "QR Codes",
      "description": "Handles scanning QR codes"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/mailinglist/subscribe": {
      "post": {
        "tags": [
          "Mailing List"
        ],
        "summary": "Subscribe a user to the mailing list",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Email to be subscribed",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Email successfully added"
          },
          "405": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Failure from Firestore or Mailchimp"
          }
        }
      }
    },
    "/mailinglist/{email}": {
      "get": {
        "tags": [
          "Mailing List"
        ],
        "summary": "Get a single email from Mailchimp",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "description": "Email to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Email successfully retrieved",
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "operation": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "items": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error retrieving from Mailchimp"
          }
        },
        "security": [
          {
            "magneton_auth": [
              "admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Mailing List"
        ],
        "summary": "Delete an email from Mailchimp",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "description": "Email to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Email successfully deleted"
          },
          "404": {
            "description": "Email was not found"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users in the database",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Users successfully retrieved",
            "schema": {
              "type": "object",
              "properties": {
                "operation": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "items": {
                  "type": "integer"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "uid": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error retrieving from Firestore"
          }
        },
        "security": [
          {
            "magneton_auth": [
              "admin"
            ]
          }
        ]
      }
    },
    "/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User data",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username",
                "password"
              ],
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User successfully created"
          },
          "500": {
            "description": "Failure in parsing the token or creating the user in Firestore"
          }
        },
        "security": [
          {
            "magneton_auth": [
              "admin"
            ]
          }
        ]
      }
    },
    "/users/{uid}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a specific user in the database",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "description": "uid to get",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User successfully retrieved",
            "schema": {
              "type": "object",
              "properties": {
                "operation": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "uid": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error retrieving from Firestore"
          }
        },
        "security": [
          {
            "magneton_auth": [
              "admin",
              "user"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update fields in a user",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "description": "uid of user to update",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User successfully updated",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "operation": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "User is not authorized to update this user"
          },
          "500": {
            "description": "Error in modifying the user in the database"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user from the database",
        "parameters": [
          {
            "in": "path",
            "name": "uid",
            "description": "uid of user to delete",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User successfully deleted",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "operation": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "User was not found in the database"
          }
        }
      }
    },
    "/users/signin": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Signs in a user",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User data",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username",
                "password"
              ],
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully signed in"
          },
          "403": {
            "description": "Authentication failure"
          }
        }
      }
    },
    "/users/signout": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Signs out a user and revokes their session",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User successfully signed out"
          },
          "500": {
            "description": "Error signing out"
          }
        }
      }
    },
    "/users/passwordReset": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Sends a password reset email",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Password reset email successfully sent"
          },
          "500": {
            "description": "Error sending password reset email"
          }
        }
      }
    },
    "/users/profile": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets the profile of the currently logged in user",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User successfully retrieved",
            "schema": {
              "type": "object",
              "properties": {
                "operation": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "uid": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schedule": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Retrieve the event schedule",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Schedule successfully retrieved",
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "number"
                },
                "events": {
                  "type": "object",
                  "properties": {
                    "id141": {
                      "type": "object",
                      "properties": {
                        "locationName": {
                          "type": "string"
                        },
                        "locationId": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "startTime": {
                          "type": "integer"
                        },
                        "endTime": {
                          "type": "number"
                        },
                        "type": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Schedule"
        ],
        "summary": "Create a schedule event",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Schedule version successfully retrieved",
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "number"
                }
              }
            }
          },
          "404": {
            "description": "No schedule version exists yet"
          }
        }
      }
    },
    "/schedule/{id}": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Get a single event",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "The UID assigned by firebase which represents the user."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Event successfully retrieved",
            "schema": {
              "type": "object",
              "properties": {
                "locationName": {
                  "type": "string"
                },
                "locationId": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "startTime": {
                  "type": "string"
                },
                "endTime": {
                  "type": "number"
                },
                "type": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Event was not found"
          }
        }
      }
    },
    "/schedule/version": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Get the current schedule version",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Event successfully retrieved",
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "number"
                }
              }
            }
          },
          "404": {
            "description": "Event was not found"
          }
        }
      }
    },
    "/updates": {
      "get": {
        "tags": [
          "Updates"
        ],
        "summary": "Retrieve the announcement feed. Comes with a version number that indicates how new the information is. The larger the number, the newer it is.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The annoucments have been retrieved",
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "number"
                },
                "updates": {
                  "type": "object",
                  "properties": {
                    "id123": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "locationId": {
                          "type": "string"
                        },
                        "deliveryTime": {
                          "type": "number"
                        },
                        "eventId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Updates"
        ],
        "summary": "Create a new update",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update successfully created",
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "number"
                }
              }
            }
          }
        }
      }
    },
    "/updates/{id}": {
      "get": {
        "tags": [
          "Updates"
        ],
        "summary": "Get a single update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "The ID of the update"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Event successfully retrieved"
          },
          "404": {
            "description": "Update was not found"
          }
        }
      }
    },
    "/updates/version": {
      "get": {
        "tags": [
          "Updates"
        ],
        "summary": "Get the current update version",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Updates version successfully retrieved",
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "number"
                }
              }
            }
          },
          "404": {
            "description": "No update version exists yet"
          }
        }
      }
    },
    "/map": {
      "get": {
        "tags": [
          "Map"
        ],
        "summary": "Retrieve the map data",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The map has been retrieved"
          }
        }
      },
      "post": {
        "tags": [
          "Map"
        ],
        "summary": "Create a new map",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Map successfully created",
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "number"
                }
              }
            }
          }
        }
      }
    },
    "/map/version": {
      "get": {
        "tags": [
          "Map"
        ],
        "summary": "Get the current map version",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Map version successfully retrieved",
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "number"
                }
              }
            }
          },
          "404": {
            "description": "No map version exists yet"
          }
        }
      }
    },
    "/users/application": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Gets the application for the current user",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The user's application was successfully retrieved",
            "schema": {
              "$ref": "#/definitions/Application"
            }
          },
          "404": {
            "description": "The user could not be found"
          }
        }
      }
    },
    "/users/application/save": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Saves the users's application",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Can be a partial version of this schema  (e.g. you can submit just the basicInfo, or just the status, etc.)",
            "schema": {
              "$ref": "#/definitions/Application"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The user's application was successfully saved"
          },
          "400": {
            "description": "User's token or input data waS invalid"
          },
          "404": {
            "description": "User could not be found"
          },
          "500": {
            "description": "Error saving the application"
          }
        }
      }
    },
    "/users/application/submit": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Submits the users's application",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Can be a partial version of this schema  (e.g. you can submit just the basicInfo, or just the status, etc.) Make sure that the status is \"submitted\"",
            "schema": {
              "$ref": "#/definitions/Application"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The user's application was successfully submitted"
          },
          "400": {
            "description": "User's token or input data waS invalid"
          },
          "404": {
            "description": "User could not be found"
          },
          "500": {
            "description": "Error saving the application"
          }
        }
      }
    },
    "/users/search": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Fuzzy search for a user by name or email",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Search successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "uid": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No users were found with that query"
          },
          "500": {
            "description": "Server-side error while searching"
          }
        }
      }
    },
    "/scan": {
      "post": {
        "tags": [
          "QR Codes"
        ],
        "summary": "Scans a user for an event",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "uid": {
                  "type": "string"
                },
                "eventId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The scan was successful"
          },
          "400": {
            "description": "The user has already been scanned for this event"
          },
          "404": {
            "description": "User could not be found"
          },
          "500": {
            "description": "Error scanning"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "magneton_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://cuhacking.com/users/signin",
      "flow": "implicit",
      "scopes": {
        "user": "Access own data",
        "admin": "Admin access"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "definitions": {
    "Application": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "basicInfo": {
          "type": "object",
          "properties": {
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "gender": {
              "type": "string"
            },
            "race": {
              "type": "string"
            },
            "emergencyPhone": {
              "type": "string"
            }
          }
        },
        "personalInfo": {
          "type": "object",
          "properties": {
            "school": {
              "type": "string"
            },
            "major": {
              "type": "string"
            },
            "minor": {
              "type": "string"
            },
            "degree": {
              "type": "string"
            },
            "expectedGraduation": {
              "type": "number"
            },
            "cityOfOrigin": {
              "type": "string"
            },
            "tShirtSize": {
              "type": "string"
            },
            "dietaryRestrictions": {
              "type": "string"
            },
            "wantsShuttle": {
              "type": "boolean"
            }
          }
        },
        "skills": {
          "type": "object",
          "properties": {
            "numHackathons": {
              "type": "number"
            },
            "selfTitle": {
              "type": "string"
            },
            "accomplishmentStatement": {
              "type": "string"
            },
            "challengeStatement": {
              "type": "string"
            }
          }
        },
        "profile": {
          "type": "object",
          "properties": {
            "gitHub": {
              "type": "string"
            },
            "linkedin": {
              "type": "string"
            },
            "website": {
              "type": "string"
            },
            "soughtPosition": {
              "type": "string"
            },
            "resume": {
              "type": "string"
            }
          }
        },
        "terms": {
          "type": "object",
          "properties": {
            "codeOfConduct": {
              "type": "boolean"
            },
            "privacyPolicy": {
              "type": "boolean"
            },
            "under18": {
              "type": "boolean"
            }
          }
        }
      }
    }
  }
}